{"version":3,"sources":["components/Author.js","redux/actions.js","components/AuthorListHandler.js","components/AuthorList.js","redux/reducers.js","App.js","serviceWorker.js","index.js"],"names":["Author","props","author","removeAuthor","index","itemClicked","addValueToInput","react_default","a","createElement","className","onClick","type","LOAD_DATA","DISPLAY_DATA","REMOVE_AUTHOR","SELECT_ITEM","MOVE_UP","MOVE_DOWN","REMOVE_SELECT","ADD_VALUE_TO_INPUT","CHANGE_INPUT_VALUE","SAVE_CHANGED_VALUE","loadData","dispatch","xhr","XMLHttpRequest","open","responseType","addEventListener","authorList","response","displayData","send","AuthorListHandler","connect","state","console","log","input","selectedIndex","authorsRequested","requested","buttonClicked","selectItem","moveUp","moveDown","removeSelect","changeInputValue","value","map","key","disabled","length","name","defaultValue","onChange","event","target","initialState","store","createStore","arguments","undefined","action","Object","objectSpread","slice","concat","authorListUp","toConsumableArray","_authorListUp$splice","splice","removedAuthorToUp","slicedToArray","authorListDown","_authorListDown$splic","removedAuthorToDown","find","item","applyMiddleware","thunk","App","es","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f61a47c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport function Author(props) {\r\n  const { author, removeAuthor, index, itemClicked, addValueToInput } = props;\r\n\r\n  return (\r\n    <div className=\"author-item\">\r\n      <span className=\"author\" onClick={() => itemClicked(index)}>{author}</span>\r\n      <button type=\"button\" onClick={() => addValueToInput(author)}>Edit</button>\r\n      <span className=\"remove-author\" onClick={() => removeAuthor(index)}>&times;</span>\r\n    </div>\r\n  );\r\n}\r\n","export const LOAD_DATA = 'load_data';\r\nexport const DISPLAY_DATA = 'display_data';\r\nexport const REMOVE_AUTHOR = 'remove_author';\r\nexport const SELECT_ITEM = 'select_item';\r\nexport const MOVE_UP = 'move_up';\r\nexport const MOVE_DOWN = 'move_down';\r\nexport const REMOVE_SELECT ='remove_select';\r\nexport const ADD_VALUE_TO_INPUT = 'add_value_to_input';\r\nexport const CHANGE_INPUT_VALUE = 'change_input_value';\r\nexport const SAVE_CHANGED_VALUE = 'save_canged_value';\r\n\r\nexport function loadData() {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: LOAD_DATA\r\n    });\r\n\r\n    const xhr = new XMLHttpRequest();\r\n\r\n    xhr.open('GET', 'http://my-json-server.typicode.com/mate-academy/literary-blog/authors');\r\n    xhr.responseType = 'json';\r\n    xhr.addEventListener('load', () => {\r\n      const authorList = xhr.response;\r\n\r\n      dispatch(displayData(authorList));\r\n    })\r\n    xhr.send();\r\n  };\r\n}\r\n\r\nexport function displayData(authorList) {\r\n  return {\r\n    type: DISPLAY_DATA,\r\n    authorList\r\n  };\r\n}\r\n\r\nexport function removeAuthor(index) {\r\n  return {\r\n    type: REMOVE_AUTHOR,\r\n    index\r\n  }\r\n}\r\n\r\nexport function selectItem(index) {\r\n  return {\r\n    type: SELECT_ITEM,\r\n    index\r\n  }\r\n}\r\n\r\nexport function removeSelect() {\r\n  return {\r\n    type: REMOVE_SELECT\r\n  }\r\n}\r\n\r\nexport function moveUp() {\r\n  return {\r\n    type: MOVE_UP\r\n  }\r\n}\r\n\r\nexport function moveDown() {\r\n  return {\r\n    type: MOVE_DOWN\r\n  }\r\n}\r\n\r\nexport function addValueToInput(input) {\r\n  return {\r\n    type: ADD_VALUE_TO_INPUT,\r\n    input\r\n  }\r\n}\r\n\r\nexport function changeInputValue(value) {\r\n  return {\r\n    type: CHANGE_INPUT_VALUE,\r\n    value\r\n  }\r\n}\r\n\r\nexport function saveChangedValue(value) {\r\n  return {\r\n    type: SAVE_CHANGED_VALUE,\r\n    value\r\n  }\r\n}","import { connect } from 'react-redux';\r\nimport { AuthorList } from './AuthorList';\r\nimport { \r\n  loadData,\r\n  removeAuthor,\r\n  selectItem,\r\n  removeSelect,\r\n  moveUp,\r\n  moveDown,\r\n  addValueToInput,\r\n  changeInputValue\r\n} from '../redux/actions';\r\n\r\nfunction mapStateToProps(state) {\r\n  console.log(state.input)\r\n  return {\r\n    index: state.selectedIndex,\r\n    authorsRequested: state.requested,\r\n    authorList: state.authorList,\r\n    input: state.input\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  \r\n  return {\r\n    buttonClicked: () => dispatch(loadData()),\r\n    removeAuthor: (index) => dispatch(removeAuthor(index)),\r\n    itemClicked: index => dispatch(selectItem(index)),\r\n    moveUp: index => dispatch(moveUp(index)),\r\n    moveDown: index => dispatch(moveDown(index)),\r\n    removeSelect: () => dispatch(removeSelect()),\r\n    addValueToInput: (input) => dispatch(addValueToInput(input)),\r\n    changeInputValue: (input) => dispatch(changeInputValue(input))\r\n  };\r\n}\r\n\r\nexport const AuthorListHandler = connect(mapStateToProps, mapDispatchToProps)(AuthorList);","import React from 'react'\r\nimport { Author } from './Author';\r\nimport './AuthorList.css';\r\n\r\nexport  function AuthorList(props) {\r\n  const {\r\n    authorList,\r\n    authorsRequested,\r\n    buttonClicked,\r\n    removeAuthor,\r\n    itemClicked,\r\n    addValueToInput,\r\n    input,\r\n    changeInputValue\r\n   } = props;\r\n\r\n  if (!authorsRequested) {\r\n    return <button onClick={buttonClicked}>Load</button>;\r\n  } else {\r\n    if (authorList === null) {\r\n      return <span>Loading...</span>;\r\n    } else {\r\n      return (\r\n        <div>\r\n          {authorList.map((author, index) => {\r\n            return (\r\n              <div key={index}>\r\n                <Author\r\n                  itemClicked={itemClicked}\r\n                  author={author}\r\n                  index={index}\r\n                  removeAuthor={removeAuthor}\r\n                  addValueToInput={addValueToInput}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n          <div>\r\n            <button\r\n              onClick={() => props.moveUp(props.index)}\r\n              disabled={props.index === 0 || props.index === null}\r\n            >Move Up\r\n            </button>\r\n            <button\r\n              onClick={() => props.moveDown(props.index)}\r\n              disabled={props.index === props.authorList.length - 1 || props.index === null}\r\n            >Move Down\r\n            </button>\r\n          </div>\r\n          <label>\r\n            Editor\r\n            <input type=\"text\" name=\"edit\" defaultValue={input} onChange={(event) => changeInputValue(event.target.value)} />\r\n          </label>\r\n          <button type=\"button\">Save</button>\r\n        </div>        \r\n      );\r\n    }\r\n  }\r\n}\r\n","import { \r\n  LOAD_DATA,\r\n  DISPLAY_DATA,\r\n  REMOVE_AUTHOR,\r\n  MOVE_DOWN,\r\n  SELECT_ITEM,\r\n  REMOVE_SELECT,\r\n  MOVE_UP,\r\n  ADD_VALUE_TO_INPUT,\r\n  CHANGE_INPUT_VALUE,\r\n  SAVE_CHANGED_VALUE\r\n} from \"./actions\";\r\n\r\nconst initialState = {\r\n  selectedIndex: null,\r\n  requested: false,\r\n  authorList: null,\r\n  input: ''\r\n}\r\n\r\nexport function reducer(state = initialState, action) {\r\n  const { selectedIndex, authorList } = state;\r\n\r\n  switch(action.type) {\r\n    case LOAD_DATA:\r\n      return {\r\n        ...state,\r\n        requested: true\r\n      };\r\n\r\n    case DISPLAY_DATA:\r\n      return {\r\n        ...state,\r\n        authorList: action.authorList\r\n      };\r\n\r\n    case REMOVE_AUTHOR:\r\n      return {\r\n        ...state,\r\n        authorList: authorList.slice(0, action.index).concat(authorList.slice(action.index + 1))\r\n      };\r\n\r\n    case SELECT_ITEM:\r\n    if (selectedIndex === null ||selectedIndex !== action.index) {\r\n      return {\r\n        ...state,\r\n        selectedIndex: action.index\r\n      };\r\n    } else {\r\n      return {\r\n        ...state,\r\n        selectedIndex: null\r\n      };\r\n    }\r\n\r\n    case REMOVE_SELECT:\r\n      return {\r\n        ...state,\r\n        selectedIndex: null\r\n      };\r\n\r\n    case MOVE_UP:\r\n      if (selectedIndex === 0) {\r\n        return state;\r\n      }\r\n  \r\n      const authorListUp = [...authorList];\r\n      const [removedAuthorToUp] = authorListUp.splice(selectedIndex, 1);\r\n      authorListUp.splice(selectedIndex - 1, 0, removedAuthorToUp);\r\n  \r\n      return {\r\n        ...state,\r\n        authorList: authorListUp,\r\n        selectedIndex: selectedIndex - 1,\r\n      };\r\n\r\n    case MOVE_DOWN:\r\n      if (selectedIndex === authorList.length - 1) {\r\n        return state;\r\n      }\r\n  \r\n      const authorListDown = [...authorList];\r\n      const [removedAuthorToDown] = authorListDown.splice(selectedIndex, 1);\r\n      authorListDown.splice(selectedIndex + 1, 0, removedAuthorToDown);\r\n  \r\n      return {\r\n        ...state,\r\n        authorList: authorListDown,\r\n        selectedIndex: selectedIndex + 1,\r\n      };\r\n      \r\n    case ADD_VALUE_TO_INPUT:\r\n      return {\r\n        ...state,\r\n        input: authorList.find(item => item === action.input)\r\n      }\r\n\r\n    case CHANGE_INPUT_VALUE:\r\n      return {\r\n        ...state,\r\n        input: action.value\r\n                \r\n      }\r\n\r\n    case SAVE_CHANGED_VALUE:\r\n      return {\r\n        ...state,\r\n        \r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { AuthorListHandler } from './components/AuthorListHandler'\r\nimport { reducer } from './redux/reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <AuthorListHandler />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}